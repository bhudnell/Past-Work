import unittest, sys, io
from lab8 import *
from bs4 import BeautifulSoup


class TestLab8(unittest.TestCase):

    def setUp(self):
        self.thorny_list = \
            [['(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--"], 
             ['(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', '(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', '(8>/--<', '(8>/--<'], 
             ["@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', "@}>-'-,--", "@}>-'-,--", '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--"], 
             ['(8>/--<', '(8>/--<', '(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<'], 
             ["@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--", "@}>-'-,--", '(8>/--<', "@}>-'-,--", '(8>/--<'], 
             ["@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--"], 
             ['(8>/--<', '(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', '(8>/--<'], 
             ["@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', "@}>-'-,--", "@}>-'-,--", '(8>/--<', "@}>-'-,--", '(8>/--<'], 
             ['(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', '(8>/--<', "@}>-'-,--", '(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--"], 
             ["@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', "@}>-'-,--", "@}>-'-,--", '(8>/--<', "@}>-'-,--", '(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<'], 
             ['(8>/--<', '(8>/--<', '(8>/--<', "@}>-'-,--", "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--"], 
             ["@}>-'-,--", '(8>/--<', "@}>-'-,--", "@}>-'-,--", '(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', '(8>/--<', "@}>-'-,--", '(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--"], 
             ['(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', '(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', '(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<'],
             ["@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--", '(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--"], 
             ["@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', "@}>-'-,--", "@}>-'-,--", '(8>/--<', '(8>/--<', '(8>/--<', "@}>-'-,--", "@}>-'-,--", '(8>/--<'],
             ['(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--", '(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<'], 
             ["@}>-'-,--", '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', "@}>-'-,--", '(8>/--<', "@}>-'-,--", '(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<'], 
             ['(8>/--<', "@}>-'-,--", '(8>/--<', "@}>-'-,--", '(8>/--<', '(8>/--<', "@}>-'-,--", "@}>-'-,--", "@}>-'-,--", '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<']]
        self.thorny_copy = self.thorny_list.copy()
        self.no_thorn_list = \
            [['(8>/--<', "@}>----", "@}>----", "@}>----", "@}>----", "@}>----", '(8>/--<', '(8>/--<', "@}>----", "@}>----", "@}>----", '(8>/--<', '(8>/--<', "@}>----"], 
             ['(8>/--<', "@}>----", '(8>/--<', '(8>/--<', '(8>/--<', "@}>----", '(8>/--<', '(8>/--<', "@}>----", "@}>----", "@}>----", '(8>/--<', '(8>/--<', '(8>/--<'], 
             ["@}>----", "@}>----", "@}>----", '(8>/--<', "@}>----", "@}>----", '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', "@}>----", "@}>----", "@}>----"], 
             ['(8>/--<', '(8>/--<', '(8>/--<', "@}>----", "@}>----", "@}>----", "@}>----", "@}>----", '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<'], 
             ["@}>----", "@}>----", "@}>----", '(8>/--<', "@}>----", "@}>----", "@}>----", '(8>/--<', '(8>/--<', "@}>----", "@}>----", '(8>/--<', "@}>----", '(8>/--<'], 
             ["@}>----", "@}>----", "@}>----", "@}>----", '(8>/--<', "@}>----", "@}>----", "@}>----", "@}>----", '(8>/--<', "@}>----", '(8>/--<', '(8>/--<', "@}>----"], 
             ['(8>/--<', '(8>/--<', "@}>----", "@}>----", "@}>----", '(8>/--<', '(8>/--<', "@}>----", '(8>/--<', '(8>/--<', "@}>----", '(8>/--<', '(8>/--<', '(8>/--<'], 
             ["@}>----", "@}>----", "@}>----", "@}>----", "@}>----", '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', "@}>----", "@}>----", '(8>/--<', "@}>----", '(8>/--<'], 
             ['(8>/--<', "@}>----", '(8>/--<', '(8>/--<', "@}>----", '(8>/--<', '(8>/--<', '(8>/--<', "@}>----", '(8>/--<', "@}>----", '(8>/--<', '(8>/--<', "@}>----"], 
             ["@}>----", "@}>----", "@}>----", "@}>----", "@}>----", '(8>/--<', "@}>----", "@}>----", '(8>/--<', "@}>----", '(8>/--<', "@}>----", '(8>/--<', '(8>/--<'], 
             ['(8>/--<', '(8>/--<', '(8>/--<', "@}>----", "@}>----", '(8>/--<', '(8>/--<', "@}>----", '(8>/--<', '(8>/--<', "@}>----", '(8>/--<', '(8>/--<', "@}>----"], 
             ["@}>----", '(8>/--<', "@}>----", "@}>----", '(8>/--<', "@}>----", '(8>/--<', '(8>/--<', '(8>/--<', "@}>----", '(8>/--<', "@}>----", "@}>----", "@}>----"], 
             ['(8>/--<', "@}>----", '(8>/--<', '(8>/--<', '(8>/--<', "@}>----", '(8>/--<', '(8>/--<', '(8>/--<', "@}>----", "@}>----", "@}>----", "@}>----", '(8>/--<'],
             ["@}>----", "@}>----", "@}>----", "@}>----", '(8>/--<', '(8>/--<', "@}>----", '(8>/--<', "@}>----", "@}>----", "@}>----", "@}>----", "@}>----", "@}>----"], 
             ["@}>----", "@}>----", "@}>----", "@}>----", "@}>----", '(8>/--<', "@}>----", "@}>----", '(8>/--<', '(8>/--<', '(8>/--<', "@}>----", "@}>----", '(8>/--<'],
             ['(8>/--<', "@}>----", '(8>/--<', '(8>/--<', "@}>----", '(8>/--<', '(8>/--<', "@}>----", '(8>/--<', "@}>----", "@}>----", "@}>----", "@}>----", '(8>/--<'], 
             ["@}>----", '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', "@}>----", '(8>/--<', "@}>----", '(8>/--<', "@}>----", "@}>----", "@}>----", "@}>----", '(8>/--<'], 
             ['(8>/--<', "@}>----", '(8>/--<', "@}>----", '(8>/--<', '(8>/--<', "@}>----", "@}>----", "@}>----", '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<', '(8>/--<']]
        self.digest_orig_emoti_ll =  \
            [['(8>/--<', "@}>----", "@}>----", "@}>----", "@}>----", "@}>----", '(8>/--<'],
             ['(8>/--<', "@}>----", '(8>/--<', '(8>/--<', '(8>/--<', "@}>----", '(8>/--<']]        
        self.digest_alt_emoti_ll_1 = self.digest_orig_emoti_ll.copy() #used in test_translate_data
        self.digest_alt_emoti_ll_2 = self.digest_orig_emoti_ll.copy()


        self.digest_orig_trans_words_ll = \
            [['ALIEN', "ROSE", "ROSE", "ROSE", "ROSE", "ROSE", 'ALIEN'],  
             ['ALIEN', "ROSE", 'ALIEN', 'ALIEN', 'ALIEN', "ROSE", 'ALIEN']]    
        self.digest_alt_trans_words_ll_1 = self.digest_orig_trans_words_ll.copy() #used in test_translate_data
        self.digest_alt_trans_words_ll_2 = self.digest_orig_trans_words_ll.copy()

    def test_make_soup(self):
        sample_html = open('index_lab8.html').read()
        soup = BeautifulSoup(sample_html, "html.parser")
        self.assertIsNotNone(make_soup('index_lab8.html'))
        self.assertEqual(soup, make_soup('index_lab8.html'))
        
    def test_make_table(self):
        self.assertEqual(self.thorny_list, make_table('index_lab8.html'))

    def test_remove_thorns(self):
        self.assertEqual(self.no_thorn_list, remove_thorns(self.thorny_list))
        self.assertTrue(self.thorny_list == self.thorny_copy)

    def test_translate_data(self):
        with self.assertRaises(RuntimeError) as cm:
            return_val = translate_data(self.digest_orig_emoti_ll)
            self.assertIsNone(return_val)
        self.assertEqual(cm.exception.args[0], "Cannot alter source, aborting mission!")
        self.assertTrue(self.digest_orig_emoti_ll == self.digest_alt_emoti_ll_1)
        # change from emoti to words
        return_val = translate_data(self.digest_alt_emoti_ll_1, False)
        self.assertIsNone(return_val)
        self.assertEqual(self.digest_orig_trans_words_ll, self.digest_alt_emoti_ll_1)   
        # change for words to emoti     
        return_val = translate_data(self.digest_alt_emoti_ll_1, False, False)
        self.assertIsNone(return_val)
        self.assertEqual(self.digest_orig_emoti_ll, self.digest_alt_emoti_ll_1)
        return_val = translate_data(self.digest_alt_trans_words_ll_1, False, False)
        self.assertIsNone(return_val)
        self.assertEqual(self.digest_orig_emoti_ll, self.digest_alt_trans_words_ll_1)
        self.assertTrue(self.digest_orig_trans_words_ll == self.digest_alt_trans_words_ll_2)
        


test = unittest.defaultTestLoader.loadTestsFromTestCase(TestLab8)
results = unittest.TextTestRunner().run(test)
sys.stdout = sys.__stdout__
sys.stdin = sys.__stdin__

print('Correctness score = ', str((results.testsRun - len(results.errors) - len(results.failures)) / results.testsRun * 100) + '%')